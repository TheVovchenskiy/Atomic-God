// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
namespace proto {
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Message_InitMultiplayerState;
class Message_InitMultiplayerStateDefaultTypeInternal;
extern Message_InitMultiplayerStateDefaultTypeInternal _Message_InitMultiplayerState_default_instance_;
class Message_JoinState;
class Message_JoinStateDefaultTypeInternal;
extern Message_JoinStateDefaultTypeInternal _Message_JoinState_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::Message* Arena::CreateMaybeMessage<::proto::Message>(Arena*);
template<> ::proto::Message_InitMultiplayerState* Arena::CreateMaybeMessage<::proto::Message_InitMultiplayerState>(Arena*);
template<> ::proto::Message_JoinState* Arena::CreateMaybeMessage<::proto::Message_JoinState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

enum Message_State : int {
  Message_State_INIT_MULTIPLAYER = 0,
  Message_State_JOIN = 1
};
bool Message_State_IsValid(int value);
constexpr Message_State Message_State_State_MIN = Message_State_INIT_MULTIPLAYER;
constexpr Message_State Message_State_State_MAX = Message_State_JOIN;
constexpr int Message_State_State_ARRAYSIZE = Message_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Message_State_descriptor();
template<typename T>
inline const std::string& Message_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Message_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Message_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Message_State_descriptor(), enum_t_value);
}
inline bool Message_State_Parse(
    const std::string& name, Message_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Message_State>(
    Message_State_descriptor(), name, value);
}
// ===================================================================

class Message_InitMultiplayerState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Message.InitMultiplayerState) */ {
 public:
  Message_InitMultiplayerState();
  virtual ~Message_InitMultiplayerState();

  Message_InitMultiplayerState(const Message_InitMultiplayerState& from);
  Message_InitMultiplayerState(Message_InitMultiplayerState&& from) noexcept
    : Message_InitMultiplayerState() {
    *this = ::std::move(from);
  }

  inline Message_InitMultiplayerState& operator=(const Message_InitMultiplayerState& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_InitMultiplayerState& operator=(Message_InitMultiplayerState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_InitMultiplayerState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_InitMultiplayerState* internal_default_instance() {
    return reinterpret_cast<const Message_InitMultiplayerState*>(
               &_Message_InitMultiplayerState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Message_InitMultiplayerState& a, Message_InitMultiplayerState& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_InitMultiplayerState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_InitMultiplayerState* New() const final {
    return CreateMaybeMessage<Message_InitMultiplayerState>(nullptr);
  }

  Message_InitMultiplayerState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_InitMultiplayerState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_InitMultiplayerState& from);
  void MergeFrom(const Message_InitMultiplayerState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_InitMultiplayerState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Message.InitMultiplayerState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
  };
  // optional string code = 1;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // @@protoc_insertion_point(class_scope:proto.Message.InitMultiplayerState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class Message_JoinState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Message.JoinState) */ {
 public:
  Message_JoinState();
  virtual ~Message_JoinState();

  Message_JoinState(const Message_JoinState& from);
  Message_JoinState(Message_JoinState&& from) noexcept
    : Message_JoinState() {
    *this = ::std::move(from);
  }

  inline Message_JoinState& operator=(const Message_JoinState& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_JoinState& operator=(Message_JoinState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_JoinState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_JoinState* internal_default_instance() {
    return reinterpret_cast<const Message_JoinState*>(
               &_Message_JoinState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Message_JoinState& a, Message_JoinState& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_JoinState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_JoinState* New() const final {
    return CreateMaybeMessage<Message_JoinState>(nullptr);
  }

  Message_JoinState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_JoinState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_JoinState& from);
  void MergeFrom(const Message_JoinState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_JoinState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Message.JoinState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
  };
  // optional string code = 1;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // @@protoc_insertion_point(class_scope:proto.Message.JoinState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class Message :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(nullptr);
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Message_InitMultiplayerState InitMultiplayerState;
  typedef Message_JoinState JoinState;

  typedef Message_State State;
  static constexpr State INIT_MULTIPLAYER =
    Message_State_INIT_MULTIPLAYER;
  static constexpr State JOIN =
    Message_State_JOIN;
  static inline bool State_IsValid(int value) {
    return Message_State_IsValid(value);
  }
  static constexpr State State_MIN =
    Message_State_State_MIN;
  static constexpr State State_MAX =
    Message_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    Message_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return Message_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return Message_State_Name(enum_t_value);
  }
  static inline bool State_Parse(const std::string& name,
      State* value) {
    return Message_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kInitMultiplayerStateFieldNumber = 2,
    kJoinStateFieldNumber = 3,
    kCurStateFieldNumber = 1,
  };
  // optional .proto.Message.InitMultiplayerState init_multiplayer_state = 2;
  bool has_init_multiplayer_state() const;
  private:
  bool _internal_has_init_multiplayer_state() const;
  public:
  void clear_init_multiplayer_state();
  const ::proto::Message_InitMultiplayerState& init_multiplayer_state() const;
  ::proto::Message_InitMultiplayerState* release_init_multiplayer_state();
  ::proto::Message_InitMultiplayerState* mutable_init_multiplayer_state();
  void set_allocated_init_multiplayer_state(::proto::Message_InitMultiplayerState* init_multiplayer_state);
  private:
  const ::proto::Message_InitMultiplayerState& _internal_init_multiplayer_state() const;
  ::proto::Message_InitMultiplayerState* _internal_mutable_init_multiplayer_state();
  public:

  // optional .proto.Message.JoinState join_state = 3;
  bool has_join_state() const;
  private:
  bool _internal_has_join_state() const;
  public:
  void clear_join_state();
  const ::proto::Message_JoinState& join_state() const;
  ::proto::Message_JoinState* release_join_state();
  ::proto::Message_JoinState* mutable_join_state();
  void set_allocated_join_state(::proto::Message_JoinState* join_state);
  private:
  const ::proto::Message_JoinState& _internal_join_state() const;
  ::proto::Message_JoinState* _internal_mutable_join_state();
  public:

  // required .proto.Message.State cur_state = 1;
  bool has_cur_state() const;
  private:
  bool _internal_has_cur_state() const;
  public:
  void clear_cur_state();
  ::proto::Message_State cur_state() const;
  void set_cur_state(::proto::Message_State value);
  private:
  ::proto::Message_State _internal_cur_state() const;
  void _internal_set_cur_state(::proto::Message_State value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::proto::Message_InitMultiplayerState* init_multiplayer_state_;
  ::proto::Message_JoinState* join_state_;
  int cur_state_;
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Message_InitMultiplayerState

// optional string code = 1;
inline bool Message_InitMultiplayerState::_internal_has_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Message_InitMultiplayerState::has_code() const {
  return _internal_has_code();
}
inline void Message_InitMultiplayerState::clear_code() {
  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message_InitMultiplayerState::code() const {
  // @@protoc_insertion_point(field_get:proto.Message.InitMultiplayerState.code)
  return _internal_code();
}
inline void Message_InitMultiplayerState::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:proto.Message.InitMultiplayerState.code)
}
inline std::string* Message_InitMultiplayerState::mutable_code() {
  // @@protoc_insertion_point(field_mutable:proto.Message.InitMultiplayerState.code)
  return _internal_mutable_code();
}
inline const std::string& Message_InitMultiplayerState::_internal_code() const {
  return code_.GetNoArena();
}
inline void Message_InitMultiplayerState::_internal_set_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Message_InitMultiplayerState::set_code(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Message.InitMultiplayerState.code)
}
inline void Message_InitMultiplayerState::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Message.InitMultiplayerState.code)
}
inline void Message_InitMultiplayerState::set_code(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Message.InitMultiplayerState.code)
}
inline std::string* Message_InitMultiplayerState::_internal_mutable_code() {
  _has_bits_[0] |= 0x00000001u;
  return code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Message_InitMultiplayerState::release_code() {
  // @@protoc_insertion_point(field_release:proto.Message.InitMultiplayerState.code)
  if (!_internal_has_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return code_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Message_InitMultiplayerState::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:proto.Message.InitMultiplayerState.code)
}

// -------------------------------------------------------------------

// Message_JoinState

// optional string code = 1;
inline bool Message_JoinState::_internal_has_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Message_JoinState::has_code() const {
  return _internal_has_code();
}
inline void Message_JoinState::clear_code() {
  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message_JoinState::code() const {
  // @@protoc_insertion_point(field_get:proto.Message.JoinState.code)
  return _internal_code();
}
inline void Message_JoinState::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:proto.Message.JoinState.code)
}
inline std::string* Message_JoinState::mutable_code() {
  // @@protoc_insertion_point(field_mutable:proto.Message.JoinState.code)
  return _internal_mutable_code();
}
inline const std::string& Message_JoinState::_internal_code() const {
  return code_.GetNoArena();
}
inline void Message_JoinState::_internal_set_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Message_JoinState::set_code(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Message.JoinState.code)
}
inline void Message_JoinState::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Message.JoinState.code)
}
inline void Message_JoinState::set_code(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Message.JoinState.code)
}
inline std::string* Message_JoinState::_internal_mutable_code() {
  _has_bits_[0] |= 0x00000001u;
  return code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Message_JoinState::release_code() {
  // @@protoc_insertion_point(field_release:proto.Message.JoinState.code)
  if (!_internal_has_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return code_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Message_JoinState::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:proto.Message.JoinState.code)
}

// -------------------------------------------------------------------

// Message

// required .proto.Message.State cur_state = 1;
inline bool Message::_internal_has_cur_state() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Message::has_cur_state() const {
  return _internal_has_cur_state();
}
inline void Message::clear_cur_state() {
  cur_state_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::proto::Message_State Message::_internal_cur_state() const {
  return static_cast< ::proto::Message_State >(cur_state_);
}
inline ::proto::Message_State Message::cur_state() const {
  // @@protoc_insertion_point(field_get:proto.Message.cur_state)
  return _internal_cur_state();
}
inline void Message::_internal_set_cur_state(::proto::Message_State value) {
  assert(::proto::Message_State_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  cur_state_ = value;
}
inline void Message::set_cur_state(::proto::Message_State value) {
  _internal_set_cur_state(value);
  // @@protoc_insertion_point(field_set:proto.Message.cur_state)
}

// optional .proto.Message.InitMultiplayerState init_multiplayer_state = 2;
inline bool Message::_internal_has_init_multiplayer_state() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || init_multiplayer_state_ != nullptr);
  return value;
}
inline bool Message::has_init_multiplayer_state() const {
  return _internal_has_init_multiplayer_state();
}
inline void Message::clear_init_multiplayer_state() {
  if (init_multiplayer_state_ != nullptr) init_multiplayer_state_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::proto::Message_InitMultiplayerState& Message::_internal_init_multiplayer_state() const {
  const ::proto::Message_InitMultiplayerState* p = init_multiplayer_state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::Message_InitMultiplayerState*>(
      &::proto::_Message_InitMultiplayerState_default_instance_);
}
inline const ::proto::Message_InitMultiplayerState& Message::init_multiplayer_state() const {
  // @@protoc_insertion_point(field_get:proto.Message.init_multiplayer_state)
  return _internal_init_multiplayer_state();
}
inline ::proto::Message_InitMultiplayerState* Message::release_init_multiplayer_state() {
  // @@protoc_insertion_point(field_release:proto.Message.init_multiplayer_state)
  _has_bits_[0] &= ~0x00000001u;
  ::proto::Message_InitMultiplayerState* temp = init_multiplayer_state_;
  init_multiplayer_state_ = nullptr;
  return temp;
}
inline ::proto::Message_InitMultiplayerState* Message::_internal_mutable_init_multiplayer_state() {
  _has_bits_[0] |= 0x00000001u;
  if (init_multiplayer_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Message_InitMultiplayerState>(GetArenaNoVirtual());
    init_multiplayer_state_ = p;
  }
  return init_multiplayer_state_;
}
inline ::proto::Message_InitMultiplayerState* Message::mutable_init_multiplayer_state() {
  // @@protoc_insertion_point(field_mutable:proto.Message.init_multiplayer_state)
  return _internal_mutable_init_multiplayer_state();
}
inline void Message::set_allocated_init_multiplayer_state(::proto::Message_InitMultiplayerState* init_multiplayer_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete init_multiplayer_state_;
  }
  if (init_multiplayer_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      init_multiplayer_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, init_multiplayer_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  init_multiplayer_state_ = init_multiplayer_state;
  // @@protoc_insertion_point(field_set_allocated:proto.Message.init_multiplayer_state)
}

// optional .proto.Message.JoinState join_state = 3;
inline bool Message::_internal_has_join_state() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || join_state_ != nullptr);
  return value;
}
inline bool Message::has_join_state() const {
  return _internal_has_join_state();
}
inline void Message::clear_join_state() {
  if (join_state_ != nullptr) join_state_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::proto::Message_JoinState& Message::_internal_join_state() const {
  const ::proto::Message_JoinState* p = join_state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::Message_JoinState*>(
      &::proto::_Message_JoinState_default_instance_);
}
inline const ::proto::Message_JoinState& Message::join_state() const {
  // @@protoc_insertion_point(field_get:proto.Message.join_state)
  return _internal_join_state();
}
inline ::proto::Message_JoinState* Message::release_join_state() {
  // @@protoc_insertion_point(field_release:proto.Message.join_state)
  _has_bits_[0] &= ~0x00000002u;
  ::proto::Message_JoinState* temp = join_state_;
  join_state_ = nullptr;
  return temp;
}
inline ::proto::Message_JoinState* Message::_internal_mutable_join_state() {
  _has_bits_[0] |= 0x00000002u;
  if (join_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Message_JoinState>(GetArenaNoVirtual());
    join_state_ = p;
  }
  return join_state_;
}
inline ::proto::Message_JoinState* Message::mutable_join_state() {
  // @@protoc_insertion_point(field_mutable:proto.Message.join_state)
  return _internal_mutable_join_state();
}
inline void Message::set_allocated_join_state(::proto::Message_JoinState* join_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete join_state_;
  }
  if (join_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      join_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, join_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  join_state_ = join_state;
  // @@protoc_insertion_point(field_set_allocated:proto.Message.join_state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::proto::Message_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::Message_State>() {
  return ::proto::Message_State_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
